#+STARTUP: logdrawer
* IDs / titles / files
** DONE Generate ID
   Generate an id using format time string and `notzettel-id-format` variable.
** DONE Get ID from string
   Return first match for id in string. If no matches return nil.
** DONE Enclose IDs in string with affixes
   Replace matches for id regexp in string with link affixes.
** DONE Get file by id
   Search notzettel directory for file that matches id exactly. If match return the file-path else nil.
* Creation
** DONE [#A] fix: appending "archive to front of file titles"
** DONE with id + title
** DONE insert frontlink
** DONE insert backlink
** DONE with active region
** other window
** DONE with timestamp
** DONE var: header-function /id/ /title/ /parent-id/ /parent-title/
** DONE var: footer-function /id/ /title/ /parent-id/ /parent-title/
** TODO Create quick note creation
   desc: a facility for creating a note quickly then going back to what you were doing. This is bacically org capture but I want a way to create the file and fill in the header/body/footer as I would a nz note
* Links

** DONE follow
   - Search for link at point, if filename result contains ID then find file, if not (error message?) search? new file?
** DONE search
   - Perform notdeft search for thing at point
** DONE copy link to current file
   - Get filename, convert to link and copy it to kill ring
** DONE insert link from list of archive files
   - Insert link to file from minibuffer selection
** DONE copy link of file in search buffer
   - Copy link of file at point in search list
* Tags
** DONE Make list of all tags
   Make list of all tags in all files that match regexp.
** DONE Insert tag from list
** TODO Search tag at point
   - Note [2020-06-15 Mon 18:42]
     Is this necessary?
* Referencing
** TODO setup ivy-bibtex
* Search
** DONE get file name of current item in notdeft search list
   In Notdeft search buffer, when current item is a file return the file path else nil.
* Viewing
** DONE Highlight filter term in viewed file
** DONE Preview file in reused buffer
   Put contents of selected file in other window in *Notdeft Preview* buffer
** DONE Next/previous line + view other window
** TODO Highlight sentence matched by filter term
   - option:
     - [ ] highlight sentence
     - [ ] word
     - [ ] paragraph
     - [ ] dim-not-matching
     - [ ] invisible-not-matching.
* Window / Buffer management
** DONE Make option: restore windows when quiting notdeft buffer
   - Note [2020-06-15 Mon 19:42]
     The basics concept is done but needs to be done more thoroughly
   - Store frame config before opening notdeft buffer and when closing restore it
** DONE Make window options for opening notdeft buffer
   - [X] reorganize-frame :: Show only two windows on the current frame, the current window and the agenda.
   - [X] current-window :: open notdeft in the current window, keeping all other windows.
   - [X] other-window :: Use ‘switch-to-buffer-other-window’ to display agenda.
   - [X] only-window :: Show agenda, deleting all other windows.
   - [ ] other-frame :: Use ‘switch-to-buffer-other-frame’ to display agenda. Also, when exiting the agenda, kill that frame.
* Search session
**

** TODO Begin: search session
   - [ ] option: new notdeft query
   - [ ] window config options:
     - [ ] current window
     - [ ] only window
     - [ ] other window
     - [ ] reconfigure window
   - [ ] option: with new notdeft buffer

** TODO option: begin search sesiosn: with new/unique preview buffer
** TODO search: preview
   - [ ] window options:
     - [ ] other window
     - [ ] reconfigure window
   - [ ] make temporary: any change closes the window
   - [ ] save fonfig before preview and restore after closing preview
** TODO search: view
   - [ ] window options
     - [ ] other window
     - [ ] reconfigure window
     - [ ] current window
     - [ ] only window
** TODO search: edit
   - [ ] window options
     - [ ] other window
     - [ ] reconfigure window
     - [ ] current window
     - [ ] only window
** DONE search: quit view/edit
   - [ ] Quit the view or edit then go back to the search
   - [ ] option: kill buffer (default)
** DONE End: search session
   - [ ] Quit the notdeft buffer (if view open quit the view)
   - [ ] option: kill the notdeft buffer
   - [ ] option: restore windows
   - [ ] option: This is a prefix arg of the notdeft quit function
   - [ ] option: kill preview buffer
** TODO End search session withou restoring windows
   would use this when you find a file and want to end a search and do not want to go back to original config

** TODO Choose file
   - [ ] choose a file from the notdeft list and end search
   - [ ] option: do not end search

* Notzettel Notdeft Mode
** DONE notzettel-notdeft-mode
   - Desc: minor mode with remapped finctinos and buffer local variables.
   - Variables:
     - pre-search-window-config
     - pre-view-window-config
     - preview-follow-mode
     - preview-buffer
     - pre-view-window-config
     - viewed-files-list
     - live-searchp :: if search is being performed with buffer
** TODO nznd: search
   - if no botdeft buffer make one
     - if buffer exists but search is not live:
       - reset and new live search
     - if buffer exists and search is live
       - go to live search
     - opt: reset: reset search
       - quit previous search if live, reset and begin new search
     - opt: new: make new notdeft buffer with new search
   - set pre-search-window-config
   - reset follow mode
   - reset-preview-buffer
** TODO notzettel increment-filter-string
   For quitting preview if it is open as soon as filter string is changed
   run notdeft increment/decrement string
** TODO bury preview before view
